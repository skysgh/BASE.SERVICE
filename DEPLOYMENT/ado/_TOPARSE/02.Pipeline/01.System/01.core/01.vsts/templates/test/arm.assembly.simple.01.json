{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceNameTemplate": {
            "minLength": 6,
            "maxLength": 50,
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Required. The default name template to use when developing the names of newly created Resources (eg: 'COUNTRYCODE-MYORG-MYAPP-{ENVID}-{BRANCHID}-{RESOURCETYPE}')'."
            }
        },
        "resourceLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "australiaeast",
                "australiasoutheast",
                "southeastasia"
            ],
            "metadata": {
                "description": "Optional. The resource location"
            }
        },
        "linkedResourcesArmTemplateRootUrl": {
            "defaultValue": "",
            "metadata": {
                "description": "Required. The http based root url from which to download referenced linked Resource ARM Templates. In most cases will be an Url to a Storage Account Container Url to which newly downloaded Source Files (just the ARM Templates) are copied to."
            },
            "type": "string"
        },
        "linkedResourcesArmTemplateRootSas": {
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The Single Access Signature (SAS) required to append to linked Resource ARM Template Uris in order to get them out of a secured Storage Account Container."
            },
            "type": "string"
        },


        "microsoftStorageStorageAccountsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        },

        "microsoftWebSitesResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        },
        "microsoftWebServerFarmsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        },


        "microsoftSqlServersResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        },
        "microsoftSqlServersDatabasesResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        },
        "microsoftSqlServersAdministratorLogin": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Required. Provide the Sql Server Administrator's name, which an infrastructure support specialist will have defined and set within a key vault outside of the projects resource group (and probably in a different subscription) so use the reference approach to get it out, and place it here. Required when creating a new Database Server. Note that security is not perfect: a developer can develop arm templates whose output records the values it extracts from a keyvault. Provide the Sql Server Administrator's Login. Required when creating a new Database Server. This is unfortunate as it requires risk-mitigation processes around deployment to correctly secure the secret and not leave it in the hands of stakeholders that don't absolutely need to know it. Developers don't."
            }
        },
        "microsoftSqlServersAdministratorLoginPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Required. Provide the Sql Server Administrator's Password, which an infrastructure support specialist will have defined and set within a key vault outside of the projects resource group (and probably in a different subscription) so use the reference approach to get it out, and place it here.  Required when creating a new Database Server.  Note that security is not perfect: a developer can develop arm templates whose output records the values it extracts from a keyvault."
            }
        },

        "microsoftKeyVaultVaultsResourceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional."
            }
        }

    },
    "variables": {
        "tmpResourceNameTemplate": "[replace(replace(replace( replace(toLower(parameters('resourceNameTemplate')),'{resource_type}','{rt}'), '{rt}',''),'_','-'),'.','-')]",
        "armUrlTemplate": "[concat(parameters('linkedResourcesArmTemplateRootUrl'), '{FOLDER}', 'arm.', '{FILENAME}', '.json' , parameters('linkedResourcesArmTemplateRootSas'))]",
        "defaults": {
            "miscServiceIntegrationSettingsPrefix" : "service-",
            "name": "[take( toLower( replace( replace( variables('tmpResourceNameTemplate'),'-',''),'_','')), 24 )]"
        },
        "resources": {
            "microsoftKeyVaultVaultsResourceName":{
                "name": "[toLower(if(empty(parameters('microsoftKeyVaultVaultsResourceName')), variables('defaults').name, parameters('microsoftKeyVaultVaultsResourceName')))]"
            }
        },
        "urls" : {
            "instances": {
                "sqlserverpackage" : "[replace(replace(variables('armUrlTemplate'), '{FOLDER}', 'microsoft/sql/'), '{FILENAME}', 'sql.servers.package')]",
                "storageaccountspackage": "[replace(replace(variables('armUrlTemplate'), '{FOLDER}', 'microsoft/storage/'), '{FILENAME}', 'storage.storageaccounts.package')]",
                "websitepackage": "[replace(replace(variables('armUrlTemplate'), '{FOLDER}', 'microsoft/web/'), '{FILENAME}', 'web.sites.package')]",
                "keyvault": "[replace(replace(variables('armUrlTemplate'), '{FOLDER}', 'microsoft/keyvault/'), '{FILENAME}', 'keyvault.vaults')]",
                "keyvaultsecrets":"[replace(replace(variables('armUrlTemplate'), '{FOLDER}', 'microsoft/keyvault/'), '{FILENAME}', 'keyvault.vaults.secrets.resourcelistkeysfirstkey')]"
            }
        }
        
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "arm.storage.storageaccounts.package",
            "apiVersion": "2016-02-01",
            "comments": "Ensure a Resource Group scoped SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').instances.storageaccountspackage]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "linkedResourcesArmTemplateRootUrl": {
                        "value": "[parameters('linkedResourcesArmTemplateRootUrl')]"
                    },
                    "linkedResourcesArmTemplateRootSas": {
                        "value": "[parameters('linkedResourcesArmTemplateRootSas')]"
                    },
                    "microsoftStorageStorageAccountsResourceName": {
                        "value": "[parameters('microsoftStorageStorageAccountsResourceName')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "arm.res.web.sites.package",
            "apiVersion": "2016-02-01",
            "comments": "Ensure a Resource Group scoped SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').instances.websitepackage]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "linkedResourcesArmTemplateRootUrl": {
                        "value": "[parameters('linkedResourcesArmTemplateRootUrl')]"
                    },
                    "linkedResourcesArmTemplateRootSas": {
                        "value": "[parameters('linkedResourcesArmTemplateRootSas')]"
                    },
                    "microsoftWebSitesResourceName": {
                        "value": "[parameters('microsoftWebSitesResourceName')]"
                    },
                    "microsoftWebServerFarmsResourceName": {
                        "value": "[parameters('microsoftWebServerFarmsResourceName')]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "arm.storage.storageaccounts.package",
                "arm.res.web.sites.package"
            ],
            "type": "Microsoft.Resources/deployments",
            "name": "arm.res.microsoftsql.server.package",
            "apiVersion": "2016-02-01",
            "comments": "Ensure a Resource Group scoped SqlServer. Is a dependency for the subsequent deployment of the FirewallRule, and the SqlServerDatabase.",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').instances.sqlserverpackage]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "linkedResourcesArmTemplateRootUrl": {
                        "value": "[parameters('linkedResourcesArmTemplateRootUrl')]"
                    },
                    "linkedResourcesArmTemplateRootSas": {
                        "value": "[parameters('linkedResourcesArmTemplateRootSas')]"
                    },
                    "microsoftSqlServersResourceName": {
                        "value": "[parameters('microsoftSqlServersResourceName')]"
                    },
                    "microsoftSqlServersDatabasesResourceName": {
                        "value": "[parameters('microsoftSqlServersDatabasesResourceName')]"
                    },
                    "microsoftSqlServersAdministratorLogin": {
                        "value": "[parameters('microsoftSqlServersAdministratorLogin')]"
                    },
                    "microsoftSqlServersAdministratorLoginPassword": {
                        "value": "[parameters('microsoftSqlServersAdministratorLoginPassword')]"
                    },
                    "microsoftSqlServersAuditingSettingsStorageAccountName" : {
                        "value": "[reference('arm.storage.storageaccounts.package').outputs.storageAccountDiagonisticsName.value]"
                    },
                    "microsoftSqlServersFirewallRulesRulesString": {
                        "value": "[reference('arm.res.web.sites.package').outputs.outboundIpAddresses.value]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "arm.res.web.sites.package"
            ],
            "name": "arm.res.keyvault.vault",
            "apiVersion": "2016-02-01",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').instances.keyvault]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "microsoftKeyVaultVaultsResourceName": {
                        "value": "[variables('resources').microsoftKeyVaultVaultsResourceName.name]"
                    },
                    "microsoftKeyVaultVaultsResourceLocation": {
                        "value": "[parameters('resourceLocation')]"
                    },
                    "microsoftKeyVaultVaultsPrincipalId": {
                        "value": "[reference('arm.res.web.sites.package').outputs.identity.value.principalId]"
                    }
                }
            }
        },
        {
            "dependsOn": [
                "arm.storage.storageaccounts.package",
                "arm.res.keyvault.vault"
            ],
            "name": "arm.res.keyvault.vault.secrets",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2016-02-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').instances.keyvaultsecrets]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "microsoftKeyVaultVaultsSecretsResourceLocation":{
                        "value":"[parameters('resourceLocation')]"
                    },
                    "microsoftKeyVaultVaultsSecretsParentResourceName":{
                        "value":"[variables('resources').microsoftKeyVaultVaultsResourceName.name]"
                    },
                    "microsoftKeyVaultVaultsSecretsResourceOutputSpecs": {
                        "value": [
                            {
                                "name": "[toLower(concat(variables('defaults').miscServiceIntegrationSettingsPrefix, 'azure-storageaccount-diagnostics-key'))]",
                                "contentType": "text/plain",
                                "targetResourceId": "[reference('arm.storage.storageaccounts.package').outputs.storageAccountDiagonisticsId.value]",
                                "targetResourceApiVersion":"2016-12-01"

                            },
                            {
                                "name": "[toLower( concat ( variables('defaults').miscServiceIntegrationSettingsPrefix, 'azure-storageaccount-default-key'))]",
                                "contentType": "text/plain",
                                "targetResourceId": "[reference('arm.storage.storageaccounts.package').outputs.storageAccountDefaultId.value]",
                                "targetResourceApiVersion":"2016-12-01"
                            }
                        ]
                    }
                }
            }
        }
    ],
    "outputs": {
        "identity": {
            "type": "object",
            "value": "[reference('arm.res.web.sites.package').outputs.identity.value]"
        },
        "storageAccountDiagonisticsName": {
            "type": "string",
            "value": "[reference('arm.storage.storageaccounts.package').outputs.storageAccountDiagonisticsName.value]"
        },
        "outboundIpAddresses": {
            "type": "string",
            "value": "[reference('arm.res.web.sites.package').outputs.outboundIpAddresses.value]"
        }
    }
}